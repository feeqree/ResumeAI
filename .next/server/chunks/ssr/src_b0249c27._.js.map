{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/app-header.tsx"],"sourcesContent":["\"use client\";\n\nimport { Bot } from \"lucide-react\";\n\nexport function AppHeader() {\n  return (\n    <header className=\"w-full py-8 text-center\">\n      <div className=\"flex items-center justify-center mb-4\">\n        <Bot className=\"w-12 h-12 mr-3 text-primary\" />\n        <h1 className=\"text-4xl font-headline font-bold text-primary\">\n          ResumeFlow AI\n        </h1>\n      </div>\n      <p className=\"text-lg text-muted-foreground\">\n        Streamline your hiring with AI-powered resume analysis.\n      </p>\n    </header>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIO,SAAS;IACd,qBACE,8OAAC;QAAO,WAAU;;0BAChB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,gMAAA,CAAA,MAAG;wBAAC,WAAU;;;;;;kCACf,8OAAC;wBAAG,WAAU;kCAAgD;;;;;;;;;;;;0BAIhE,8OAAC;gBAAE,WAAU;0BAAgC;;;;;;;;;;;;AAKnD","debugId":null}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/job-description-card.tsx"],"sourcesContent":["\"use client\";\n\nimport type React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { FileText } from \"lucide-react\";\n\ninterface JobDescriptionCardProps {\n  jobDescription: string;\n  setJobDescription: (value: string) => void;\n}\n\nexport function JobDescriptionCard({ jobDescription, setJobDescription }: JobDescriptionCardProps) {\n  return (\n    <Card className=\"w-full shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-2xl font-headline\">\n          <FileText className=\"w-6 h-6 mr-2 text-primary\" />\n          Job Description\n        </CardTitle>\n        <CardDescription>\n          Paste the job description below to analyze resumes against it.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid w-full gap-1.5\">\n          <Label htmlFor=\"job-description\" className=\"sr-only\">Job Description</Label>\n          <Textarea\n            id=\"job-description\"\n            placeholder=\"Paste job description here...\"\n            value={jobDescription}\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setJobDescription(e.target.value)}\n            rows={10}\n            className=\"text-sm\"\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AANA;;;;;;AAaO,SAAS,mBAAmB,EAAE,cAAc,EAAE,iBAAiB,EAA2B;IAC/F,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;;kCACT,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,8OAAC,8MAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;4BAA8B;;;;;;;kCAGpD,8OAAC,gIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAInB,8OAAC,gIAAA,CAAA,cAAW;0BACV,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,iIAAA,CAAA,QAAK;4BAAC,SAAQ;4BAAkB,WAAU;sCAAU;;;;;;sCACrD,8OAAC,oIAAA,CAAA,WAAQ;4BACP,IAAG;4BACH,aAAY;4BACZ,OAAO;4BACP,UAAU,CAAC,IAA8C,kBAAkB,EAAE,MAAM,CAAC,KAAK;4BACzF,MAAM;4BACN,WAAU;;;;;;;;;;;;;;;;;;;;;;;AAMtB","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/progress.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,8OAAC,oKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,oKAAA,CAAA,YAA2B;YAC1B,WAAU;YACV,OAAO;gBAAE,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;YAAC;;;;;;;;;;;AAIhE,SAAS,WAAW,GAAG,oKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 584, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tooltip.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,kBAAkB,mKAAA,CAAA,WAAyB;AAEjD,MAAM,UAAU,mKAAA,CAAA,OAAqB;AAErC,MAAM,iBAAiB,mKAAA,CAAA,UAAwB;AAE/C,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGpC,CAAC,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC1C,8OAAC,mKAAA,CAAA,UAAwB;QACvB,KAAK;QACL,YAAY;QACZ,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sYACA;QAED,GAAG,KAAK;;;;;;AAGb,eAAe,WAAW,GAAG,mKAAA,CAAA,UAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 620, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 752, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/hooks/use-mobile.tsx"],"sourcesContent":["import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,oBAAoB;AAEnB,SAAS;IACd,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAuB;IAEpE,CAAA,GAAA,qMAAA,CAAA,YAAe,AAAD,EAAE;QACd,MAAM,MAAM,OAAO,UAAU,CAAC,CAAC,YAAY,EAAE,oBAAoB,EAAE,GAAG,CAAC;QACvE,MAAM,WAAW;YACf,YAAY,OAAO,UAAU,GAAG;QAClC;QACA,IAAI,gBAAgB,CAAC,UAAU;QAC/B,YAAY,OAAO,UAAU,GAAG;QAChC,OAAO,IAAM,IAAI,mBAAmB,CAAC,UAAU;IACjD,GAAG,EAAE;IAEL,OAAO,CAAC,CAAC;AACX","debugId":null}},
    {"offset": {"line": 777, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/results-table.tsx"],"sourcesContent":["\n\"use client\";\n\nimport * as React from \"react\";\nimport type { ProcessedResume } from \"@/lib/types\";\nimport type { CalculateRelevancyScoreOutput } from '@/ai/flows/calculate-relevancy-score';\nimport type { DetectResumeSpamOutput } from '@/ai/flows/detect-resume-spam';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogClose,\n} from \"@/components/ui/dialog\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport {\n  FileArchive,\n  Gauge,\n  ShieldCheck,\n  ShieldAlert,\n  ListChecks,\n  MessageSquareText,\n  Loader2,\n  CheckCircle2,\n  XCircle,\n  ArrowUpDown,\n  ArrowUp,\n  ArrowDown,\n} from \"lucide-react\";\n\ninterface ResultsTableProps {\n  results: ProcessedResume[];\n}\n\ntype SortableKeys = \"fileName\" | \"relevancyScore\" | \"isSpam\";\ntype DialogType = 'spam' | 'skills' | 'explanation';\n\nexport function ResultsTable({ results }: ResultsTableProps) {\n  const [sortConfig, setSortConfig] = React.useState<{ key: SortableKeys | null; direction: \"ascending\" | \"descending\" }>({\n    key: null,\n    direction: \"ascending\",\n  });\n  const isMobile = useIsMobile();\n  const [activeDialog, setActiveDialog] = React.useState<{ resumeId: string; type: DialogType } | null>(null);\n\n  const openDialog = (resumeId: string, type: DialogType) => {\n    setActiveDialog({ resumeId, type });\n  };\n\n  const closeDialog = () => {\n    setActiveDialog(null);\n  };\n\n  const sortedResults = React.useMemo(() => {\n    let sortableItems = [...results];\n    if (sortConfig.key !== null) {\n      sortableItems.sort((a, b) => {\n        let aValue: string | number | boolean | undefined;\n        let bValue: string | number | boolean | undefined;\n\n        if (sortConfig.key === \"fileName\") {\n          aValue = a.fileName.toLowerCase();\n          bValue = b.fileName.toLowerCase();\n        } else if (sortConfig.key === \"relevancyScore\") {\n          aValue = a.relevancyScoreData?.relevancyScore;\n          bValue = b.relevancyScoreData?.relevancyScore;\n        } else if (sortConfig.key === \"isSpam\") {\n          aValue = a.spamDetectionData?.isSpam;\n          bValue = b.spamDetectionData?.isSpam;\n        }\n        \n        if (aValue === undefined && bValue !== undefined) return sortConfig.direction === 'ascending' ? 1 : -1;\n        if (aValue !== undefined && bValue === undefined) return sortConfig.direction === 'ascending' ? -1 : 1;\n        if (aValue === undefined && bValue === undefined) return 0;\n\n\n        if (aValue! < bValue!) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (aValue! > bValue!) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [results, sortConfig]);\n\n  const requestSort = (key: SortableKeys) => {\n    let direction: \"ascending\" | \"descending\" = \"ascending\";\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const getSortIcon = (key: SortableKeys) => {\n    if (sortConfig.key !== key) {\n      return <ArrowUpDown className=\"ml-2 h-3 w-3 opacity-30\" />;\n    }\n    return sortConfig.direction === \"ascending\" ? (\n      <ArrowUp className=\"ml-2 h-3 w-3\" />\n    ) : (\n      <ArrowDown className=\"ml-2 h-3 w-3\" />\n    );\n  };\n\n\n  if (results.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-muted-foreground\">\n        <FileArchive className=\"w-12 h-12 mx-auto mb-4\" />\n        <p>No resumes processed yet. Upload resumes and click \"Process Resumes\".</p>\n      </div>\n    );\n  }\n\n  const renderSpamCheckContent = (item: ProcessedResume) => (\n    <>\n      <p className=\"text-sm font-semibold\">Confidence: {(item.spamDetectionData!.confidenceScore * 100).toFixed(0)}%</p>\n      <p className=\"text-sm mt-1\">{item.spamDetectionData!.explanation}</p>\n    </>\n  );\n\n  const renderMatchedSkillsContent = (item: ProcessedResume) => (\n     <ul className=\"list-disc list-inside text-xs\">\n        {item.relevancyScoreData!.matchedSkills!.map(skill => <li key={skill}>{skill}</li>)}\n    </ul>\n  );\n\n  const renderRelevancyExplanationContent = (item: ProcessedResume) => (\n    <p className=\"text-xs\">{item.relevancyScoreData!.explanation}</p>\n  );\n\n  return (\n    <TooltipProvider>\n      <div className=\"overflow-x-auto\">\n        <Table className=\"min-w-full\">\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-[200px]\">\n                <Button variant=\"ghost\" onClick={() => requestSort(\"fileName\")} className=\"px-1 py-0 h-auto text-xs hover:bg-transparent\">\n                  Filename\n                  {getSortIcon(\"fileName\")}\n                </Button>\n              </TableHead>\n              <TableHead className=\"w-[80px]\">Status</TableHead>\n              <TableHead className=\"w-[150px]\">\n                 <Button variant=\"ghost\" onClick={() => requestSort(\"relevancyScore\")} className=\"px-1 py-0 h-auto text-xs hover:bg-transparent\">\n                  Relevancy\n                  {getSortIcon(\"relevancyScore\")}\n                </Button>\n              </TableHead>\n              <TableHead className=\"w-[150px]\">\n                <Button variant=\"ghost\" onClick={() => requestSort(\"isSpam\")} className=\"px-1 py-0 h-auto text-xs hover:bg-transparent\">\n                  Spam Check\n                  {getSortIcon(\"isSpam\")}\n                </Button>\n              </TableHead>\n              <TableHead>Matched Skills</TableHead>\n              <TableHead>Relevancy Explanation</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {sortedResults.map((item) => (\n              <TableRow key={item.id}>\n                <TableCell className=\"font-medium flex items-center\">\n                  <FileArchive className=\"w-4 h-4 mr-2 shrink-0\" />\n                  <span className=\"truncate\" title={item.fileName}>{item.fileName}</span>\n                </TableCell>\n                <TableCell>\n                  {item.status === \"queued\" && <Badge variant=\"outline\">Queued</Badge>}\n                  {item.status === \"parsing\" && <Loader2 className=\"w-5 h-5 animate-spin text-primary\" />}\n                  {item.status === \"analyzing\" && <Loader2 className=\"w-5 h-5 animate-spin text-primary\" />}\n                  {item.status === \"completed\" && <CheckCircle2 className=\"w-5 h-5 text-green-500\" />}\n                  {item.status === \"error\" && (\n                    <Tooltip>\n                      <TooltipTrigger>\n                        <XCircle className=\"w-5 h-5 text-destructive\" />\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        <p className=\"text-xs\">{item.errorMessage || \"Unknown error\"}</p>\n                      </TooltipContent>\n                    </Tooltip>\n                  )}\n                </TableCell>\n                <TableCell>\n                  {item.relevancyScoreData ? (\n                    <div className=\"flex flex-col space-y-1\">\n                       <div className=\"flex items-center\">\n                        <Gauge className=\"w-4 h-4 mr-1 text-primary\" /> \n                        <span className=\"text-sm font-semibold\">{item.relevancyScoreData.relevancyScore}%</span>\n                       </div>\n                      <Progress value={item.relevancyScoreData.relevancyScore} className=\"h-2\" />\n                    </div>\n                  ) : (\n                    \"-\"\n                  )}\n                </TableCell>\n                <TableCell>\n                  {item.spamDetectionData ? (\n                    isMobile ? (\n                      <Dialog\n                        open={activeDialog?.resumeId === item.id && activeDialog?.type === 'spam'}\n                        onOpenChange={(isOpen) => isOpen ? openDialog(item.id, 'spam') : closeDialog()}\n                      >\n                        <DialogTrigger asChild>\n                          {item.spamDetectionData.isSpam ? (\n                            <Badge variant=\"destructive\" className=\"cursor-pointer\">\n                              <ShieldAlert className=\"w-4 h-4 mr-1\" />\n                              Spam\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" className=\"cursor-pointer border-green-500 text-green-700 bg-green-100\">\n                              <ShieldCheck className=\"w-4 h-4 mr-1\" />\n                              Genuine\n                            </Badge>\n                          )}\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-md\">\n                          <DialogHeader>\n                            <DialogTitle>Spam Check: {item.fileName}</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"py-2\">\n                            {renderSpamCheckContent(item)}\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    ) : (\n                      <Tooltip>\n                        <TooltipTrigger>\n                          {item.spamDetectionData.isSpam ? (\n                            <Badge variant=\"destructive\" className=\"cursor-default\">\n                              <ShieldAlert className=\"w-4 h-4 mr-1\" />\n                              Spam\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" className=\"cursor-default border-green-500 text-green-700 bg-green-100\">\n                              <ShieldCheck className=\"w-4 h-4 mr-1\" />\n                              Genuine\n                            </Badge>\n                          )}\n                        </TooltipTrigger>\n                        <TooltipContent className=\"max-w-xs\">\n                          {renderSpamCheckContent(item)}\n                        </TooltipContent>\n                      </Tooltip>\n                    )\n                  ) : (\n                    \"-\"\n                  )}\n                </TableCell>\n                <TableCell>\n                  {item.relevancyScoreData?.matchedSkills && item.relevancyScoreData.matchedSkills.length > 0 ? (\n                     isMobile ? (\n                      <Dialog\n                        open={activeDialog?.resumeId === item.id && activeDialog?.type === 'skills'}\n                        onOpenChange={(isOpen) => isOpen ? openDialog(item.id, 'skills') : closeDialog()}\n                      >\n                        <DialogTrigger asChild>\n                           <Button variant=\"ghost\" className=\"p-0 h-auto hover:bg-transparent\">\n                                <div className=\"flex items-center cursor-pointer\">\n                                    <ListChecks className=\"w-4 h-4 mr-1 text-primary shrink-0\" />\n                                    <span className=\"text-sm truncate\">\n                                        {item.relevancyScoreData.matchedSkills.slice(0,3).join(\", \")}\n                                        {item.relevancyScoreData.matchedSkills.length > 3 && '...'}\n                                    </span>\n                                </div>\n                            </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-md\">\n                          <DialogHeader>\n                            <DialogTitle>Matched Skills: {item.fileName}</DialogTitle>\n                          </DialogHeader>\n                           <div className=\"py-2 max-h-60 overflow-y-auto\">\n                            {renderMatchedSkillsContent(item)}\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                     ) : (\n                        <Tooltip>\n                            <TooltipTrigger>\n                                <div className=\"flex items-center\">\n                                    <ListChecks className=\"w-4 h-4 mr-1 text-primary shrink-0\" />\n                                    <span className=\"text-sm truncate\">\n                                        {item.relevancyScoreData.matchedSkills.slice(0,3).join(\", \")}\n                                        {item.relevancyScoreData.matchedSkills.length > 3 && '...'}\n                                    </span>\n                                </div>\n                            </TooltipTrigger>\n                            <TooltipContent className=\"max-w-xs\">\n                                {renderMatchedSkillsContent(item)}\n                            </TooltipContent>\n                        </Tooltip>\n                     )\n                  ) : (\n                    item.relevancyScoreData ? <span className=\"text-xs text-muted-foreground\">None</span> : \"-\"\n                  )}\n                </TableCell>\n                <TableCell>\n                  {item.relevancyScoreData?.explanation ? (\n                     isMobile ? (\n                       <Dialog\n                        open={activeDialog?.resumeId === item.id && activeDialog?.type === 'explanation'}\n                        onOpenChange={(isOpen) => isOpen ? openDialog(item.id, 'explanation') : closeDialog()}\n                       >\n                        <DialogTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-auto w-auto p-0 hover:bg-transparent\">\n                                <MessageSquareText className=\"w-5 h-5 text-primary cursor-pointer\" />\n                            </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-md\">\n                          <DialogHeader>\n                            <DialogTitle>Relevancy Explanation: {item.fileName}</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"py-2\">\n                            {renderRelevancyExplanationContent(item)}\n                          </div>\n                        </DialogContent>\n                       </Dialog>\n                     ) : (\n                        <Tooltip>\n                        <TooltipTrigger className=\"cursor-default\">\n                            <MessageSquareText className=\"w-5 h-5 text-primary\" />\n                        </TooltipTrigger>\n                        <TooltipContent className=\"max-w-md\">\n                            {renderRelevancyExplanationContent(item)}\n                        </TooltipContent>\n                        </Tooltip>\n                     )\n                  ) : (\n                    \"-\"\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    </TooltipProvider>\n  );\n}\n\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1648, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/parse-resume.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Parses resumes in various formats (PDF, DOCX) into a standardized text format,\n * and attempts to extract key skills and experience summaries.\n *\n * - parseResume - A function that handles the resume parsing process.\n * - ParseResumeInput - The input type for the parseResume function.\n * - ParseResumeOutput - The return type for the parseResume function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ParseResumeInputSchema = z.object({\n  resumeDataUri: z\n    .string()\n    .describe(\n      \"A resume file (PDF, DOCX, TXT) as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ParseResumeInput = z.infer<typeof ParseResumeInputSchema>;\n\nconst ParseResumeOutputSchema = z.object({\n  parsedText: z\n    .string()\n    .describe('The extracted text content from the resume in a standardized format.'),\n  extractedSkills: z\n    .array(z.string())\n    .optional()\n    .describe('A list of skills explicitly mentioned or inferred from the resume text.'),\n  extractedExperienceSummaries: z\n    .array(z.string())\n    .optional()\n    .describe('Short summaries or key phrases extracted from work experience sections.'),\n});\nexport type ParseResumeOutput = z.infer<typeof ParseResumeOutputSchema>;\n\nexport async function parseResume(input: ParseResumeInput): Promise<ParseResumeOutput> {\n  return parseResumeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'parseResumePrompt',\n  input: {schema: ParseResumeInputSchema},\n  output: {schema: ParseResumeOutputSchema},\n  prompt: `You are an expert at extracting text and structured information from documents.\n\n  Extract all of the text from the following resume. Ignore headers and footers, and attempt to order the text in a sensible way.\n  This will be the 'parsedText'.\n\n  Additionally, from the extracted text:\n  1. Identify and list key skills mentioned in a section or throughout the resume. This will be 'extractedSkills'.\n  2. Provide short, distinct summaries or key phrases from the work experience sections. This will be 'extractedExperienceSummaries'.\n\n  Resume: {{media url=resumeDataUri}}`,\n});\n\nconst parseResumeFlow = ai.defineFlow(\n  {\n    name: 'parseResumeFlow',\n    inputSchema: ParseResumeInputSchema,\n    outputSchema: ParseResumeOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IAuCsB","debugId":null}},
    {"offset": {"line": 1660, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/detect-resume-spam.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A resume spam detection AI agent.\n *\n * - detectResumeSpam - A function that handles the resume spam detection process.\n * - DetectResumeSpamInput - The input type for the detectResumeSpam function.\n * - DetectResumeSpamOutput - The return type for the detectResumeSpam function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst DetectResumeSpamInputSchema = z.object({\n  resumeText: z.string().describe('The text content of the resume to be checked for spam.'),\n  currentYear: z.number().describe('The current calendar year to provide context for dates mentioned in the resume.'),\n});\nexport type DetectResumeSpamInput = z.infer<typeof DetectResumeSpamInputSchema>;\n\nconst DetectResumeSpamOutputSchema = z.object({\n  isSpam: z.boolean().describe('Whether the resume is likely to be spam or AI-generated.'),\n  confidenceScore: z\n    .number()\n    .describe('A score between 0 and 1 indicating the confidence in the spam detection (1 being most confident).'),\n  explanation: z\n    .string()\n    .describe('A brief explanation of why the resume was classified as spam or not spam, considering the current year for date-related claims.'),\n});\nexport type DetectResumeSpamOutput = z.infer<typeof DetectResumeSpamOutputSchema>;\n\nexport async function detectResumeSpam(input: DetectResumeSpamInput): Promise<DetectResumeSpamOutput> {\n  return detectResumeSpamFlow(input);\n}\n\nconst detectResumeSpamPrompt = ai.definePrompt({\n  name: 'detectResumeSpamPrompt',\n  input: {schema: DetectResumeSpamInputSchema},\n  output: {schema: DetectResumeSpamOutputSchema},\n  prompt: `You are an AI-powered spam detection expert specializing in identifying spam or AI-generated resumes. The current year is {{{currentYear}}}.\n\n  Analyze the resume text provided and determine if it is likely to be spam or AI-generated content.\n  When evaluating dates (e.g., graduation, awards, experience), use the current year {{{currentYear}}} as a reference.\n  - Claims from the recent past or within {{{currentYear}}} should be considered plausible unless other factors suggest fabrication.\n  - Claims for achievements or qualifications dated significantly in the future (e.g., {{{currentYear}}} + 2 or more) are highly suspicious.\n  - Minor discrepancies in dates for very recent events in {{{currentYear}}} might be acceptable if the overall content seems genuine.\n\n  Focus on identifying:\n  1. Verifiably false information (e.g., awards from a future year like {{{currentYear}}} + 5, claims of attending non-existent institutions, or impossible qualifications).\n  2. Grossly exaggerated or impossible claims regarding responsibilities, achievements, or timelines.\n  3. Incoherent, nonsensical, or placeholder text.\n  4. Overly generic, templated text that lacks any personalization or specific details suggestive of a mass application.\n\n  Be cautious about flagging content as spam if it's merely unconventional, ambitious, or contains minor typos, as long as it's not clearly fabricated or nonsensical. Distinguish between genuine (though perhaps poorly written) content and deliberate attempts to deceive or spam.\n\n  Provide a confidence score between 0 and 1 (where 1 indicates highest confidence that it IS spam).\n  Explain your reasoning, especially if it relates to dates or seemingly unrealistic claims, referencing the current year {{{currentYear}}}.\n\n  Resume Text: {{{resumeText}}}\n  `,\n});\n\nconst detectResumeSpamFlow = ai.defineFlow(\n  {\n    name: 'detectResumeSpamFlow',\n    inputSchema: DetectResumeSpamInputSchema,\n    outputSchema: DetectResumeSpamOutputSchema,\n  },\n  async input => {\n    const {output} = await detectResumeSpamPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IA+BsB","debugId":null}},
    {"offset": {"line": 1672, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/calculate-relevancy-score.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Flow to calculate the relevancy score of a resume against a job description.\n *\n * - calculateRelevancyScore - A function that calculates the relevancy score.\n * - CalculateRelevancyScoreInput - The input type for the calculateRelevancyScore function.\n * - CalculateRelevancyScoreOutput - The return type for the calculateRelevancyScore function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CalculateRelevancyScoreInputSchema = z.object({\n  jobDescription: z\n    .string()\n    .describe('The job description to compare the resume against.'),\n  resumeText: z.string().describe('The text content of the resume.'),\n});\nexport type CalculateRelevancyScoreInput = z.infer<\n  typeof CalculateRelevancyScoreInputSchema\n>;\n\nconst CalculateRelevancyScoreOutputSchema = z.object({\n  relevancyScore: z\n    .number()\n    .describe(\n      'A numerical score (0-100) indicating the resume relevance to the job description.'\n    ),\n  matchedSkills: z\n    .array(z.string())\n    .describe('An array of skills from the resume that match the job description.'),\n  explanation: z\n    .string()\n    .describe(\n      'A short textual explanation of the relevancy score, highlighting the matched skills.'\n    ),\n});\nexport type CalculateRelevancyScoreOutput = z.infer<\n  typeof CalculateRelevancyScoreOutputSchema\n>;\n\nexport async function calculateRelevancyScore(\n  input: CalculateRelevancyScoreInput\n): Promise<CalculateRelevancyScoreOutput> {\n  return calculateRelevancyScoreFlow(input);\n}\n\nconst calculateRelevancyScorePrompt = ai.definePrompt({\n  name: 'calculateRelevancyScorePrompt',\n  input: {schema: CalculateRelevancyScoreInputSchema},\n  output: {schema: CalculateRelevancyScoreOutputSchema},\n  prompt: `You are an AI expert in resume screening and candidate matching.\n\nYou will receive a job description and a resume text. Your task is to:\n\n1.  Calculate a relevancy score (0-100) indicating how well the resume matches the job description.\n2.  Identify and list the specific skills from the resume that align with the job description.\n3.  Provide a concise explanation of the relevancy score, emphasizing the identified skills.\n\nJob Description: {{{jobDescription}}}\n\nResume Text: {{{resumeText}}}\n\nEnsure that the relevancyScore is a number between 0 and 100, matchedSkills is an array of strings, and explanation is a clear, textual summary.\n\nOutput:`,\n});\n\nconst calculateRelevancyScoreFlow = ai.defineFlow(\n  {\n    name: 'calculateRelevancyScoreFlow',\n    inputSchema: CalculateRelevancyScoreInputSchema,\n    outputSchema: CalculateRelevancyScoreOutputSchema,\n  },\n  async input => {\n    const {output} = await calculateRelevancyScorePrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IAyCsB","debugId":null}},
    {"offset": {"line": 1684, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/resume-processing-card.tsx"],"sourcesContent":["\n\"use client\";\n\nimport * as React from 'react';\nimport { useState, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ResultsTable } from \"./results-table\";\nimport type { ProcessedResume } from \"@/lib/types\";\nimport { UploadCloud, Zap, List, X, Loader2, Info } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { parseResume, type ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { detectResumeSpam } from '@/ai/flows/detect-resume-spam';\nimport { calculateRelevancyScore } from '@/ai/flows/calculate-relevancy-score';\n\ninterface ResumeProcessingCardProps {\n  jobDescription: string;\n}\n\nconst readFileAsDataURL = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(file);\n  });\n};\n\nconst MAX_RETRIES = 3;\nconst INITIAL_DELAY_MS = 1000;\nconst BACKOFF_FACTOR = 2;\n\nasync function retryAsyncFunction<T>(\n  fn: () => Promise<T>,\n  fileNameForToast: string,\n  operationName: string,\n  toastFn: (options: any) => void\n): Promise<T> {\n  let attempts = 0;\n  let delay = INITIAL_DELAY_MS;\n  while (attempts < MAX_RETRIES) {\n    try {\n      return await fn();\n    } catch (error: any) {\n      attempts++;\n      if (error.message && error.message.includes(\"503 Service Unavailable\") && attempts < MAX_RETRIES) {\n        toastFn({\n          title: `API Overload: ${operationName} (${fileNameForToast})`,\n          description: `Attempt ${attempts} of ${MAX_RETRIES} failed. Retrying in ${delay / 1000}s...`,\n          variant: \"default\",\n        });\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay *= BACKOFF_FACTOR;\n      } else {\n        throw error; \n      }\n    }\n  }\n  throw new Error(`Failed ${operationName} for ${fileNameForToast} after ${MAX_RETRIES} retries.`);\n}\n\n\nexport function ResumeProcessingCard({ jobDescription }: ResumeProcessingCardProps) {\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [processingResults, setProcessingResults] = useState<ProcessedResume[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const [currentYear, setCurrentYear] = useState<number | null>(null);\n\n  React.useEffect(() => {\n    setCurrentYear(new Date().getFullYear());\n  }, []);\n\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      const newFiles = Array.from(event.target.files);\n      const uniqueNewFiles = newFiles.filter(nf => !uploadedFiles.some(uf => uf.name === nf.name));\n      setUploadedFiles((prevFiles) => [...prevFiles, ...uniqueNewFiles]);\n    }\n  };\n\n  const removeFile = (fileName: string) => {\n    setUploadedFiles(prevFiles => prevFiles.filter(file => file.name !== fileName));\n    setProcessingResults(prevResults => prevResults.filter(result => result.fileName !== fileName));\n  }\n\n  const handleProcessResumes = async () => {\n    if (!jobDescription.trim()) {\n      toast({\n        title: \"Job Description Missing\",\n        description: \"Please provide a job description before processing resumes.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (uploadedFiles.length === 0) {\n      toast({\n        title: \"No Resumes Uploaded\",\n        description: \"Please upload resumes to process.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n     if (currentYear === null) {\n      toast({\n        title: \"System Error\",\n        description: \"Could not determine the current year. Please refresh.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    toast({\n      title: \"Processing Started\",\n      description: `Analyzing ${uploadedFiles.length} resume(s)...`,\n    });\n\n    const initialResults: ProcessedResume[] = uploadedFiles.map(file => ({\n      id: `${file.name}-${Date.now()}`,\n      file,\n      fileName: file.name,\n      status: 'queued',\n    }));\n    setProcessingResults(initialResults);\n    \n\n    for (let i = 0; i < initialResults.length; i++) {\n      const currentResume = initialResults[i];\n      \n      try {\n        setProcessingResults(prev => prev.map(r => r.id === currentResume.id ? { ...r, status: 'parsing' } : r));\n        const resumeDataUri = await readFileAsDataURL(currentResume.file);\n        \n        const parsedResult: ParseResumeOutput = await retryAsyncFunction(\n            () => parseResume({ resumeDataUri }),\n            currentResume.fileName,\n            \"Parsing Resume\",\n            toast\n        );\n        \n        setProcessingResults(prev => prev.map(r => r.id === currentResume.id ? { ...r, status: 'analyzing', parseOutput: parsedResult } : r));\n        \n        const resumeTextToAnalyze = parsedResult.parsedText;\n        if (!resumeTextToAnalyze) {\n            throw new Error(\"Resume parsing returned no text.\");\n        }\n\n        const [spamResult, relevancyResult] = await Promise.all([\n          retryAsyncFunction(\n            () => detectResumeSpam({ resumeText: resumeTextToAnalyze, currentYear }),\n            currentResume.fileName,\n            \"Spam Detection\",\n            toast\n          ),\n          retryAsyncFunction(\n            () => calculateRelevancyScore({ jobDescription, resumeText: resumeTextToAnalyze }),\n            currentResume.fileName,\n            \"Relevancy Scoring\",\n            toast\n          )\n        ]);\n\n        setProcessingResults(prev => prev.map(r => r.id === currentResume.id ? {\n          ...r,\n          status: 'completed',\n          spamDetectionData: spamResult,\n          relevancyScoreData: relevancyResult,\n        } : r));\n\n        toast({\n          title: \"Resume Processed\",\n          description: `${currentResume.fileName} analyzed successfully.`,\n        });\n\n      } catch (error: any) {\n        console.error(`Error processing ${currentResume.fileName}:`, error);\n        const isServiceUnavailable = error.message && error.message.includes(\"503 Service Unavailable\");\n        const errorMessage = isServiceUnavailable\n          ? `The AI service is temporarily overloaded. Please try again later for ${currentResume.fileName}.`\n          : error.message || `An unknown error occurred while processing ${currentResume.fileName}.`;\n\n        setProcessingResults(prev => prev.map(r => r.id === currentResume.id ? {\n          ...r,\n          status: 'error',\n          errorMessage: isServiceUnavailable \n            ? `AI service temporarily overloaded. Please try again later.`\n            : (error.message || 'An unknown error occurred'),\n        } : r));\n        \n        toast({\n          title: isServiceUnavailable ? \"API Service Overload\" : \"Processing Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      }\n    }\n    setIsProcessing(false);\n  };\n\n  return (\n    <Card className=\"w-full shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-2xl font-headline\">\n          <UploadCloud className=\"w-6 h-6 mr-2 text-primary\" />\n          Resume Processing\n        </CardTitle>\n        <CardDescription>\n          Upload resumes (PDF, DOCX, TXT) and process them against the job description.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div>\n          <Input\n            id=\"resume-upload\"\n            type=\"file\"\n            multiple\n            accept=\".pdf,.doc,.docx,.txt\" \n            onChange={handleFileChange}\n            className=\"hidden\"\n            ref={fileInputRef}\n          />\n          <Button onClick={() => fileInputRef.current?.click()} variant=\"outline\" disabled={isProcessing}>\n            <UploadCloud className=\"w-4 h-4 mr-2\" />\n            Select Resumes\n          </Button>\n          {uploadedFiles.length > 0 && (\n            <div className=\"mt-4 space-y-2\">\n              <h3 className=\"text-sm font-medium flex items-center\"><List className=\"w-4 h-4 mr-2\" />Selected Files:</h3>\n              <ul className=\"max-h-32 overflow-y-auto rounded-md border p-2 space-y-1\">\n                {uploadedFiles.map((file) => (\n                  <li key={file.name} className=\"text-xs flex justify-between items-center p-1 bg-muted/50 rounded\">\n                    <span className=\"truncate\" title={file.name}>{file.name}</span>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5\" onClick={() => removeFile(file.name)} disabled={isProcessing}>\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <Button onClick={handleProcessResumes} disabled={isProcessing || uploadedFiles.length === 0} className=\"w-full sm:w-auto bg-accent hover:bg-accent/90 text-accent-foreground\">\n            {isProcessing ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n            ) : (\n                <Zap className=\"w-4 h-4 mr-2\" />\n            )}\n            Process Resumes\n            </Button>\n        </div>\n         <div className=\"flex items-start text-xs text-muted-foreground mt-2\">\n            <Info className=\"w-3 h-3 mr-1.5 mt-0.5 shrink-0\" />\n            <p>\n                By processing resumes, you acknowledge that resume data will be sent to a third-party AI service for analysis.\n            </p>\n        </div>\n\n\n        <div className=\"mt-6\">\n          <h3 className=\"text-lg font-semibold mb-2 font-headline\">Processing Results</h3>\n          <ResultsTable results={processingResults} />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2114, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { AppHeader } from \"@/components/app-header\";\nimport { JobDescriptionCard } from \"@/components/job-description-card\";\nimport { ResumeProcessingCard } from \"@/components/resume-processing-card\";\n\nexport default function Home() {\n  const [jobDescription, setJobDescription] = useState<string>(\"\");\n  const [currentYear, setCurrentYear] = useState<number | null>(null);\n\n  useEffect(() => {\n    setCurrentYear(new Date().getFullYear());\n  }, []);\n\n  return (\n    <div className=\"flex flex-col items-center min-h-screen p-4 sm:p-8 bg-background selection:bg-primary/20 selection:text-primary\">\n      <div className=\"w-full max-w-5xl mx-auto space-y-8\">\n        <AppHeader />\n        <main className=\"space-y-8\">\n          <JobDescriptionCard\n            jobDescription={jobDescription}\n            setJobDescription={setJobDescription}\n          />\n          <ResumeProcessingCard jobDescription={jobDescription} />\n        </main>\n        <footer className=\"text-center py-6 text-sm text-muted-foreground\">\n          {currentYear !== null ? (\n            <p>&copy; {currentYear} ResumeFlow AI. Powered by Generative AI.</p>\n          ) : (\n            <p>&copy; ResumeFlow AI. Powered by Generative AI.</p>\n          )}\n        </footer>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAC7D,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAE9D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,eAAe,IAAI,OAAO,WAAW;IACvC,GAAG,EAAE;IAEL,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC,mIAAA,CAAA,YAAS;;;;;8BACV,8OAAC;oBAAK,WAAU;;sCACd,8OAAC,gJAAA,CAAA,qBAAkB;4BACjB,gBAAgB;4BAChB,mBAAmB;;;;;;sCAErB,8OAAC,kJAAA,CAAA,uBAAoB;4BAAC,gBAAgB;;;;;;;;;;;;8BAExC,8OAAC;oBAAO,WAAU;8BACf,gBAAgB,qBACf,8OAAC;;4BAAE;4BAAQ;4BAAY;;;;;;6CAEvB,8OAAC;kCAAE;;;;;;;;;;;;;;;;;;;;;;AAMf","debugId":null}}]
}